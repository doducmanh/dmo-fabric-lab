table ThemeImages
	lineageTag: c7abe260-3877-4859-b5d9-cdc1aec4413e

	measure 'Display Image' =
			
			IF(
			    HASONEVALUE(ThemeImages[Name]),
			    "data:image/jpeg;base64, " &
			    CONCATENATEX(
			        ThemeImages,
			        ThemeImages[Pic],
			        ,
			        ThemeImages[Index],
			        ASC)
			        )
		lineageTag: 4f00293f-33f1-4c29-9711-f3889b0dc416
		dataCategory: ImageUrl

	column Name
		dataType: string
		lineageTag: 7daeadf5-2622-4853-9969-926e04db1817
		summarizeBy: none
		sourceColumn: Name

		annotation SummarizationSetBy = Automatic

	column Pic
		dataType: string
		lineageTag: 747c30f0-e55d-4397-9abc-7b95e965c683
		summarizeBy: none
		sourceColumn: Pic

		annotation SummarizationSetBy = Automatic

	column Index
		dataType: double
		lineageTag: 59f8f513-96c6-4d76-9ebe-850dc1d2dfe0
		summarizeBy: sum
		sourceColumn: Index

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition ThemeImages = m
		mode: import
		source =
				let
				    //Get list of files in folder
				    Source = Folder.Files("C:\Users\DMO5HC\OneDrive - Bosch Group\Power BI\IMG\BoschLogo"),
				    //Remove unnecessary columns
				    RemoveOtherColumns = Table.SelectColumns(Source,{"Content", "Name"}),
				    //Creates Splitter function
				    SplitTextFunction = Splitter.SplitTextByRepeatedLengths(30000),
				    //Converts table of files to list
				    ListInput = Table.ToRows(RemoveOtherColumns),
				    //Function to convert binary of photo to multiple
				    //text values
				    ConvertOneFile = (InputRow as list) =>
				        let
				            BinaryIn = InputRow{0},
				            FileName = InputRow{1},
				            BinaryText = Binary.ToText(BinaryIn, BinaryEncoding.Base64),
				            SplitUpText = SplitTextFunction(BinaryText),
				            AddFileName = List.Transform(SplitUpText, each {FileName,_})
				        in
				            AddFileName,
				    //Loops over all photos and calls the above function
				    ConvertAllFiles = List.Transform(ListInput, each ConvertOneFile(_)),
				    //Combines lists together
				    CombineLists = List.Combine(ConvertAllFiles),
				    //Converts results to table
				    ToTable = #table(type table[Name=text,Pic=text],CombineLists),
				    //Adds index column to output table
				    AddIndexColumn = Table.AddIndexColumn(ToTable, "Index", 0, 1)
				in
				    AddIndexColumn

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

